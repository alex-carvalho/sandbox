pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    
    environment {
        SONAR_TOKEN = credentials('sonar-token')
        // GITHUB_CREDENTIALS = credentials('github-token')
    }
    
    
    stages {
         stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/master']],
                        userRemoteConfigs: [[url: 'https://github.com/alex-carvalho/sandbox']]]
                    )
                }
            }
        }

        stage('Build') {
            steps {
                dir("samples/java/spring-web-3-j21"){
                    sh './gradlew clean build -x test'
                }
                
            }
        }
        
        stage('Test') {
            steps {
                dir("samples/java/spring-web-3-j21"){
                    sh './gradlew test'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir("samples/java/spring-web-3-j21"){
                    sh './gradlew sonar -Dsonar.token=$SONAR_TOKEN'
                }
            }
        }
        
        stage('Terraform Plan') {
            steps {
                dir("devops/challenges/jenkins-spring-ec2/terraform-files") {
                    sh 'tflocal init'
                    sh 'tflocal plan'
                }
            }
        }
        
        stage('Terraform Apply') {
            steps {
                input message: 'Apply Terraform changes?', ok: 'Apply'
                dir("devops/challenges/jenkins-spring-ec2/terraform-files") {
                    sh 'tflocal apply -auto-approve'
                }
            }
        }
    }
}